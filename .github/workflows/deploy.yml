name: Deploy AutentiseringApp

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up SSH key for Git operations
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.GITKEY }}
      - name: Set Git config for GPG
        run: |
          git config --global user.name "Jon Arve Ovesen"
          git config --global user.email "jonovesen@gmail.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey <GPG_KEY_ID>
      - name: Cache Swift Packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-swift-
            ${{ runner.os }}-
      - name: Install Swift and update packages
        run: |
          sudo apt-get update || exit 1
          sudo apt-get install -y swift || exit 1
          swift package update
      - name: Run Unit Tests
        run: swift test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up SSH key for Git operations
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.GITKEY }}
      - name: Set Git config for GPG
        run: |
          git config --global user.name "Jon Arve Ovesen"
          git config --global user.email "jonovesen@gmail.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey <GPG_KEY_ID>
      - name: Cache Swift Packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
            ${{ runner.os }}-swift-
            ${{ runner.os }}-
      - name: Install Swift and update packages
        run: |
          sudo apt-get update || exit 1
          sudo apt-get install -y swift || exit 1
          swift package update
      # Optional: Uncomment the following step to clean up Docker resources when needed
      # - name: Clean up Docker resources
      #   run: docker system prune -f
      - name: Stop and Remove Existing Containers
        run: docker-compose down || true
      - name: Build and start Docker container
        run: docker-compose up -d --build --pull
      - name: Check application status
        run: |
          for i in {1..5}; do
            if curl --fail http://localhost:8080; then
              echo "‚úÖ Application is running"
              exit 0
            fi
            echo "Waiting for application to start..."
            sleep 10
          done
          echo "‚ùå Application deployment failed"
          docker-compose logs
          exit 1
      - name: Notify on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: AutentiseringAppBot
          SLACK_COLOR: '#FF0000'
          SLACK_MESSAGE: |
            üö® Deployment failed for `${{ github.ref }}` by `${{ github.actor }}`

      # Optional: Uncomment the following step to notify team on success
      # - name: Notify team on success
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_USERNAME: AutentiseringAppBot
      #     SLACK_COLOR: '#36a64f'
      #     SLACK_MESSAGE: |
      #       ‚úÖ Deployment successful for `${{ github.ref }}` by `${{ github.actor }}`
